name: CI

on: [push, pull_request]

env:
  PIPING_SERVER_CHECK_VERSION: 0.2.2

jobs:
  build:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: CGO_ENABLED=0 go build -o go-piping-server main/main.go
      - name: Test
        run: go test -v ./...

  linux_operational_test:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: CGO_ENABLED=0 go build -o go-piping-server main/main.go
      - name: Create certificates
        run: cd /tmp && mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
#      - name: Operational test
#        run: |
#          set -xeu
#          # Run a server
#          ./go-piping-server --http-port=8181 --enable-https --https-port=8443 --crt-path=/tmp/ssl_certs/server.crt --key-path=/tmp/ssl_certs/server.key &> ./piping-server.log &
#          # Get server PID
#          server_pid=$!
#          sleep 3
#
#          # Transfer data over HTTP
#          echo "hello, world" | curl -T - localhost:8181/mypath &
#          diff <(echo "hello, world") <(curl localhost:8181/mypath)
#          # Make a large random file
#          dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
#          # Transfer large data over HTTP
#          cat /tmp/500M.dat | curl -T - localhost:8181/mypath &
#          diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath)
#          rm /tmp/500M.dat
#
#          # Transfer data over HTTPS
#          echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
#          diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
#          # Make a large random file
#          dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
#          # Transfer large data over HTTPS
#          cat /tmp/500M.dat | curl -kT - https://localhost:8443/mypath2 &
#          diff <(cat /tmp/500M.dat) <(curl -k https://localhost:8443/mypath2)
#          rm /tmp/500M.dat
#
#          # HTTP/2 support
#          (echo hello | curl -ksST- https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n' > /tmp/http2_post.txt) &
#          diff <(echo '2:200') <(curl -ksS https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n')
#          diff <(echo '2:200') /tmp/http2_post.txt
#
#          # Transfer data using multipart
#          # Make a large random file
#          dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
#          # Transfer large data over HTTP
#          curl -F myfile=@/tmp/500M.dat localhost:8181/mypath3 &
#          diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath3)
#          rm /tmp/500M.dat
#
#          # Stop the server
#          kill $server_pid
#
#          # Print server's log
#          cat ./piping-server.log
      - name: Install piping-server-check
        run: cd /tmp && wget -O piping-server-check.deb https://github.com/nwtgck/piping-server-check/releases/download/v${PIPING_SERVER_CHECK_VERSION}/piping-server-check-${PIPING_SERVER_CHECK_VERSION}-linux-amd64.deb && sudo dpkg -i piping-server-check.deb
      - name: piping-server-check
        run: piping-server-check --http1.0 --http1.0-tls --http1.1 --http1.1-tls --h2c --h2 --h3 --tls-skip-verify --concurrency 100 --compromise post_first_byte_by_byte_streaming --server-command='./go-piping-server --http-port=$HTTP_PORT --enable-https --enable-http3 --https-port=$HTTPS_PORT --crt-path=/tmp/ssl_certs/server.crt --key-path=/tmp/ssl_certs/server.key' --transfer-speed-byte $((1024 * 1024 * 1024 * 1024)) --transfer-span 3s --transfer-span 10s
        timeout-minutes: 1
